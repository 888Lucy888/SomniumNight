# -*- coding: utf-8 -*-
"""SomniumNightData.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NiMtrrrdxD7gwAVs0T3sXuxRNu-_Qgmz

## Limpieza Y Analisis de Datos

### Media, mediana y moda
"""

import pandas as pd
import matplotlib.pyplot as plt
from datetime import timedelta

# Create a DataFrame from the data
data = {
    'Dispositivo': ['Withings Sleep', 'Apple Watch', 'Withings Sleep', 'Xiaomi Band', 'Apple Watch', 'Fitbit'],
    'Nombre (Siglas)': ['C.L.C.A.', 'I.V.C.S.', 'X.M.', 'M.A.V.', 'S.G.N.', 'E.C.'],
    'Horas de Sueño': ['8:23', '4:45', '7:04', '8:02', '6:51', '5:39'],
    'REM %': ['25,00%', '19.3', '29%', '21,00%', '24,00%', '7,00%'],
    'Deep Sleep %': ['38,00%', '31.6', '26%', '28,00%', '24,00%', '9,00%'],
    'Horas de S. WN': ['7:17', '8:11', '6:44', '5:54', '9:04', '7:02'],
    'REM % WN': ['32,00%', '31.36', '33%', '15,00%', '17,00%', '18,00%'],
    'Deep Sleep % WN': ['17,00%', '12.83', '20%', '19,00%', '13,00%', '17,00%']
}

df = pd.DataFrame(data)

# Convert time columns to timedelta format
df['Horas de Sueño'] = pd.to_timedelta(df['Horas de Sueño'] + ':00')
df['Horas de S. WN'] = pd.to_timedelta(df['Horas de S. WN'] + ':00')

# Convert percentage columns to numeric format
df['REM %'] = df['REM %'].str.rstrip('%').str.replace(',', '.').astype(float)
df['Deep Sleep %'] = df['Deep Sleep %'].str.rstrip('%').str.replace(',', '.').astype(float)
df['REM % WN'] = df['REM % WN'].str.rstrip('%').str.replace(',', '.').astype(float)
df['Deep Sleep % WN'] = df['Deep Sleep % WN'].str.rstrip('%').str.replace(',', '.').astype(float)

# Calculate mode, mean and median values
mode_no_wn_sueño = df['Horas de Sueño'].mode().iloc[0]
mode_wn_sueño = df['Horas de S. WN'].mode().iloc[0]

mean_sueño = df['Horas de Sueño'].mean()
median_sueño = df['Horas de Sueño'].median()

mean_wn = df['Horas de S. WN'].mean()
median_wn = df['Horas de S. WN'].median()

# %% 

mode_no_wn_rem = df['REM %'].mode().iloc[0]
mode_wn_rem = df['REM % WN'].mode().iloc[0]

mean_no_wn_rem = df['REM %'].mean()
mean_wn_rem = df['REM % WN'].mean()

median_no_wn_rem = df['REM %'].median()
median_wn_rem = df['REM % WN'].median()

mode_no_wn_deep_sleep = df['Deep Sleep %'].mode().iloc[0]
mode_wn_deep_sleep = df['Deep Sleep % WN'].mode().iloc[0]

mean_no_wn_deep_sleep = df['Deep Sleep %'].mean()
mean_wn_deep_sleep = df['Deep Sleep % WN'].mean()

median_no_wn_deep_sleep = df['Deep Sleep %'].median()
median_wn_deep_sleep = df['Deep Sleep % WN'].median()


# Convert mean and median values to HH:MM:SS format
mean_sueño_str = str(mean_sueño).split(' ')[-1]
median_sueño_str = str(median_sueño).split(' ')[-1]

mean_wn_str = str(mean_wn).split(' ')[-1]
median_wn_str = str(median_wn).split(' ')[-1]

# Print the results
print("Sin Ruido Blanco:")
print("Horas de Sueño - Moda:", mode_no_wn_sueño)
print(f"Horas de Sueño - Media: {mean_sueño_str}")
print(f"Horas de Sueño - Mediana: {median_sueño_str}")
print("REM % - Moda:", mode_no_wn_rem)
print("REM % - Media:", round(mean_no_wn_rem, 2))
print("REM % - Mediana:", median_no_wn_rem)
print("Deep Sleep % - Moda:", mode_no_wn_deep_sleep)
print("Deep Sleep % - Media:", round(mean_no_wn_deep_sleep, 2))
print("Deep Sleep % - Mediana:", median_no_wn_deep_sleep)

print("\nCon Ruido Blanco:")
print("Horas de Sueño - Moda:", mode_wn_sueño)
print(f"Horas de Sueño - Media: {mean_wn_str}")
print(f"Horas de Sueño - Mediana: {median_wn_str}")
print("REM % - Moda:", mode_wn_rem)
print("REM % - Media:", round(mean_wn_rem, 2))
print("REM % - Mediana:", median_wn_rem)
print("Deep Sleep % - Moda:", mode_wn_deep_sleep)
print("Deep Sleep % - Media:", round(mean_wn_deep_sleep, 2))
print("Deep Sleep % - Mediana:", median_wn_deep_sleep)

"""### Graficacion de Datos

### Horas de Sueño
"""

df = pd.DataFrame(data)

# Convert time columns to timedelta format
df['Horas de Sueño'] = pd.to_timedelta(df['Horas de Sueño'] + ':00')
df['Horas de S. WN'] = pd.to_timedelta(df['Horas de S. WN'] + ':00')

# Convert percentage columns to numeric format
df['REM %'] = df['REM %'].str.rstrip('%').str.replace(',', '.').astype(float)
df['Deep Sleep %'] = df['Deep Sleep %'].str.rstrip('%').str.replace(',', '.').astype(float)
df['REM % WN'] = df['REM % WN'].str.rstrip('%').str.replace(',', '.').astype(float)
df['Deep Sleep % WN'] = df['Deep Sleep % WN'].str.rstrip('%').str.replace(',', '.').astype(float)

# Convert time columns to minutes
df['Minutos de Sueño Sin RB'] = df['Horas de Sueño'].dt.total_seconds() / 60
df['Minutos de Sueño Con RB'] = df['Horas de S. WN'].dt.total_seconds() / 60

# Calculate the mean sleep time without white noise by device
df_media_sin_rb = df.groupby('Dispositivo')['Minutos de Sueño Sin RB'].mean().reset_index()

# Calculate the mean sleep time with white noise by device
df_media_con_rb = df.groupby('Dispositivo')['Minutos de Sueño Con RB'].mean().reset_index()

# Merge the two dataframes
df_merged = pd.merge(df_media_sin_rb, df_media_con_rb, on='Dispositivo', suffixes=('_Sin_RB', '_Con_RB'))

# Plot the average sleep time with and without white noise
fig, ax = plt.subplots(figsize=(10, 6))

df_merged.plot(x='Dispositivo', y=['Minutos de Sueño Sin RB', 'Minutos de Sueño Con RB'], kind='bar', ax=ax)
ax.set_ylabel('Tiempo (Minutos)')
ax.set_title('Comparación de Tiempo Promedio de Sueño con y sin Ruido Blanco por Dispositivo')

plt.tight_layout()
plt.show()

"""### % REM Promedio"""

df = pd.DataFrame(data)

# Convert time columns to timedelta format
df['Horas de Sueño'] = pd.to_timedelta(df['Horas de Sueño'] + ':00')
df['Horas de S. WN'] = pd.to_timedelta(df['Horas de S. WN'] + ':00')

# Convert percentage columns to numeric format
df['REM %'] = df['REM %'].str.rstrip('%').str.replace(',', '.').astype(float)
df['Deep Sleep %'] = df['Deep Sleep %'].str.rstrip('%').str.replace(',', '.').astype(float)
df['REM % WN'] = df['REM % WN'].str.rstrip('%').str.replace(',', '.').astype(float)
df['Deep Sleep % WN'] = df['Deep Sleep % WN'].str.rstrip('%').str.replace(',', '.').astype(float)

# Convert time columns to minutes
df['Minutos de Sueño Sin RB'] = df['Horas de Sueño'].dt.total_seconds() / 60
df['Minutos de Sueño Con RB'] = df['Horas de S. WN'].dt.total_seconds() / 60

# Calculate average % REM for Horas de Sueño con Ruido Blanco and % REM Horas de Sueño Sin RB
avg_rem_with_noise = df['REM % WN'].mean()
avg_rem_without_noise = df['REM %'].mean()

# Create the figure and axes
fig, ax = plt.subplots(figsize=(8, 6))

# Bar plot for average % REM
rem_data = [avg_rem_with_noise, avg_rem_without_noise]
rem_labels = ['Con Ruido Blanco', 'Sin Ruido Blanco']
ax.bar(rem_labels, rem_data)
ax.set_ylabel('Porcentaje REM')
ax.set_title('Comparación del Porcentaje Promedio de REM')

plt.show()

"""### % Sueño Profundo Promedio"""

df = pd.DataFrame(data)

# Convert time columns to timedelta format
df['Horas de Sueño'] = pd.to_timedelta(df['Horas de Sueño'] + ':00')
df['Horas de S. WN'] = pd.to_timedelta(df['Horas de S. WN'] + ':00')

# Convert percentage columns to numeric format
df['REM %'] = df['REM %'].str.rstrip('%').str.replace(',', '.').astype(float)
df['Deep Sleep %'] = df['Deep Sleep %'].str.rstrip('%').str.replace(',', '.').astype(float)
df['REM % WN'] = df['REM % WN'].str.rstrip('%').str.replace(',', '.').astype(float)
df['Deep Sleep % WN'] = df['Deep Sleep % WN'].str.rstrip('%').str.replace(',', '.').astype(float)

# Convert time columns to minutes
df['Minutos de Sueño Sin RB'] = df['Horas de Sueño'].dt.total_seconds() / 60
df['Minutos de Sueño Con RB'] = df['Horas de S. WN'].dt.total_seconds() / 60

# Calculate average % Deep Sleep for Horas de Sueño con Ruido Blanco and % Sueño Profundo Horas de Sueño Sin RB
avg_deep_sleep_with_noise = df['Deep Sleep % WN'].mean()
avg_deep_sleep_without_noise = df['Deep Sleep %'].mean()

# Create the figure and axes
fig, ax = plt.subplots(figsize=(8, 6))

# Bar plot for average % Deep Sleep
deep_sleep_data = [avg_deep_sleep_with_noise, avg_deep_sleep_without_noise]
deep_sleep_labels = ['Con Ruido Blanco', 'Sin Ruido Blanco']
ax.bar(deep_sleep_labels, deep_sleep_data)
ax.set_ylabel('Porcentaje Sueño Profundo')
ax.set_title('Comparación del Porcentaje Promedio de Sueño Profundo')

plt.show()

"""### Comparación de REM y Sueño Profundo segun minutos de sueño

"""

df = pd.DataFrame(data)

# Convertir las columnas de tiempo al formato timedelta
df['Horas de Sueño'] = pd.to_timedelta(df['Horas de Sueño'] + ':00')
df['Horas de S. WN'] = pd.to_timedelta(df['Horas de S. WN'] + ':00')

# Convertir las columnas de porcentaje a formato numérico
df['REM %'] = df['REM %'].str.rstrip('%').str.replace(',', '.').astype(float)
df['Deep Sleep %'] = df['Deep Sleep %'].str.rstrip('%').str.replace(',', '.').astype(float)
df['REM % WN'] = df['REM % WN'].str.rstrip('%').str.replace(',', '.').astype(float)
df['Deep Sleep % WN'] = df['Deep Sleep % WN'].str.rstrip('%').str.replace(',', '.').astype(float)

# Convertir las columnas de tiempo a minutos
df['Minutos de Sueño Sin RB'] = df['Horas de Sueño'].dt.total_seconds() / 60
df['Minutos de Sueño Con RB'] = df['Horas de S. WN'].dt.total_seconds() / 60

# Tomar todos los minutos de Sueño
minutes_df = pd.DataFrame({
    'Minutos de Sueño Sin RB': df['Minutos de Sueño Sin RB'],
    'Minutos de Sueño Con RB': df['Minutos de Sueño Con RB']
})



# Graficar REM % y Deep Sleep % con y sin ruido blanco
fig, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, figsize=(8, 12))

# Gráfico de línea para REM % y REM % WN
df[['REM %', 'REM % WN']].plot(kind='line', ax=ax1, marker='o')
ax1.set_xticks(range(len(df)))
ax1.set_xticklabels(minutes_df['Minutos de Sueño Sin RB'], rotation=45)
ax1.set_ylabel('Porcentaje REM')
ax1.set_xlabel('Minutos de Sueño')
ax1.set_title('Comparación de % REM Con y Sin Ruido Blanco (Minutos de Sueño)')
ax1.legend(['% REM Sin RB', '% REM Con RB'])

# Gráfico de línea para Deep Sleep % y Deep Sleep % WN
df[['Deep Sleep %', 'Deep Sleep % WN']].plot(kind='line', ax=ax2, marker='o')
ax2.set_xticks(range(len(df)))
ax2.set_xticklabels(minutes_df['Minutos de Sueño Sin RB'], rotation=45)
ax2.set_ylabel('Porcentaje Sueño Profundo')
ax2.set_xlabel('Minutos de Sueño')
ax2.set_title('Comparación de Sueño Profundo Con y Sin Ruido Blanco (Minutos de Sueño)')
ax2.legend(['Sueño Profundo Sin RB', 'Sueño Profundo Con RB'])


plt.tight_layout()
plt.show()

"""### Comparación de REM y Sueño Profundo segun dispositivos

"""

df = pd.DataFrame(data)

# Convertir las columnas de tiempo al formato timedelta
df['Horas de Sueño'] = pd.to_timedelta(df['Horas de Sueño'] + ':00')
df['Horas de S. WN'] = pd.to_timedelta(df['Horas de S. WN'] + ':00')

# Convertir las columnas de porcentaje a formato numérico
df['REM %'] = df['REM %'].str.rstrip('%').str.replace(',', '.').astype(float)
df['Deep Sleep %'] = df['Deep Sleep %'].str.rstrip('%').str.replace(',', '.').astype(float)
df['REM % WN'] = df['REM % WN'].str.rstrip('%').str.replace(',', '.').astype(float)
df['Deep Sleep % WN'] = df['Deep Sleep % WN'].str.rstrip('%').str.replace(',', '.').astype(float)

# Convertir las columnas de tiempo a minutos
df['Minutos de Sueño Sin RB'] = df['Horas de Sueño'].dt.total_seconds() / 60
df['Minutos de Sueño Con RB'] = df['Horas de S. WN'].dt.total_seconds() / 60

# Calcular los promedios por dispositivo
df_mean = df.groupby('Dispositivo').mean().reset_index()

# Graficar REM % y Deep Sleep % con y sin ruido blanco
fig, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, figsize=(8, 12))

# Gráfico de línea para REM % y REM % WN
df_mean[['REM %', 'REM % WN']].plot(kind='line', ax=ax1, marker='o')
ax1.set_xticks(range(len(df_mean)))
ax1.set_xticklabels(df_mean['Dispositivo'], rotation=45)
ax1.set_ylabel('Porcentaje REM')
ax1.set_title('Comparación de % REM Con y Sin Ruido Blanco (Dispositivos)')
ax1.legend(['% REM Sin RB', '% REM Con RB'])

# Gráfico de línea para Deep Sleep % y Deep Sleep % WN
df_mean[['Deep Sleep %', 'Deep Sleep % WN']].plot(kind='line', ax=ax2, marker='o')
ax2.set_xticks(range(len(df_mean)))
ax2.set_xticklabels(df_mean['Dispositivo'], rotation=45)
ax2.set_ylabel('Porcentaje Sueño Profundo')
ax2.set_title('Comparación de Sueño Profundo Con y Sin Ruido Blanco (Dispositivos)')
ax2.legend(['Sueño Profundo Sin RB', 'Sueño Profundo Con RB'])

plt.tight_layout()
plt.show()